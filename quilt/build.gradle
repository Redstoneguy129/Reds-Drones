plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quilt_fabric_api_version}-${rootProject.minecraft_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
    inputs.property "group", rootProject.maven_group
    inputs.property "id", rootProject.archives_base_name
    inputs.property "version", project.version
    inputs.property "name", rootProject.mod_full_name
    inputs.property "description", rootProject.mod_description
    inputs.property "license", rootProject.mod_license
    inputs.property "minecraftVersion", rootProject.minecraft_version
    def authors_list = rootProject.mod_authors.split(", ")
    String[] authors_list_after = new String[authors_list.length]
    int x = 0
    for(author in authors_list) {
        authors_list_after[x] = "\""+author+"\": \"Developer\""
        x++
    }
    def authors = String.join(",", authors_list_after)
    filesMatching("quilt.mod.json") {
        expand([
                "group": rootProject.maven_group,
                'id': rootProject.archives_base_name,
                'version': project.version,
                'name': rootProject.mod_full_name,
                'description': rootProject.mod_description,
                'license': rootProject.mod_license,
                'minecraftVersion': rootProject.minecraft_version
        ])
        filter {
            it.replace("\"authors\": \"\"", authors)
        }
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}